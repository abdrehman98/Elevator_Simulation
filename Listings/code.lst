C51 COMPILER V9.54   CODE                                                                  05/17/2018 09:05:41 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE CODE
OBJECT MODULE PLACED IN .\Objects\code.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE code.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\code
                    -.lst) TABS(2) OBJECT(.\Objects\code.obj)

line level    source

   1          #include <reg51.h>
   2          
   3          //IO Pins
   4          sbit doorLed = P2^0;      //Door Open-Close
   5          sbit up = P2^2;           //Up Led
   6          sbit down = P2^1;         //Down Led
   7          
   8          sbit loc_4 = P2^3;        //Location Indicators
   9          sbit loc_3 = P2^4;
  10          sbit loc_2 = P2^5;
  11          sbit loc_1 = P2^6;
  12          
  13          sbit u1 = P1^0;           //Buttons At each Level
  14          sbit u2 = P1^1;           //For Up as well as down
  15          sbit u3 = P1^2;
  16          sbit u4 = P1^3;
  17          sbit d1 = P1^4;   
  18          sbit d2 = P1^5;   
  19          sbit d3 = P1^6;
  20          sbit d4 = P1^7;
  21          
  22          sbit s1 = P0^3;           //Butons inside at Lift
  23          sbit s2 = P0^2;
  24          sbit s3 = P0^1;
  25          sbit s4 = P0^0; 
  26          sbit doorClose = P0^4;    //To sense if Door of Elevator is closer or not
  27          
  28          sbit e = P3^2;            //Emergency Button in Lift it will be Handeled by Intrupt it will be Highest Priority
             - Intrupt
  29          sbit DS = P3^3;           //This will be simulating Door Sensor Button
  30          
  31          //Local Variables 
  32          int i;                          //For {for loops}
  33          int LocationOfElevator = 1;     //Memory to store Location od Elevator
  34          char req[2];                    //Memory to store and Request
  35          int reqForLevel2Go[4];          //Memory to store request Inside for every level NO=0, YES=1
  36          int upRequestsOutside[4];       //Memory to store up request Outside for every level NO=0, YES=1
  37          int downRequestsOutside[4];     //Memory to store down request Outside for every level NO=0, YES=1
  38          int direction = 1;              //Memory for Direction. Up=1, Down=0
  39          
  40          //Implementation of Functions
  41          /*
  42          Almost all of self explainator due to their names
  43          But i have all so given explaination where required in functions through comments 
  44          */
  45          void reset (void){
  46   1        //This Function resets by Forcefully seting instruction pointer on to 0000 HEX
  47   1        ((void (code *) (void)) 0x0000) ();
  48   1      }
  49          
  50          void delay(int time){     
  51   1        //Delay Function
  52   1        int i,j;
  53   1        for(i=0;i<time;i++)
C51 COMPILER V9.54   CODE                                                                  05/17/2018 09:05:41 PAGE 2   

  54   1          for(j=0;j<1275;j++);
  55   1      }
  56          
  57          void upLed(int u){
  58   1        //On = 1, Off = 0 
  59   1        up = u;
  60   1        return;
  61   1      }
  62          
  63          void downLed(int d){
  64   1        //On = 1, Off = 0
  65   1        down = d;
  66   1        return;
  67   1      }
  68          
  69          void doorIsClosed(void){      //this function will not return Control Until Door is Closed
  70   1          doorLed = 1;              //Switch on Door_Open Led
  71   1          while(1){
  72   2            if(doorClose == 1){
  73   3              doorLed = 0;          //Switch off Door_Open Led
  74   3              return;
  75   3          }
  76   2        }
  77   1      }
  78          
  79          void where2Go(void){
  80   1        /*
  81   1        This functions monitor requests on Inside of Elevator and store them
  82   1        in Local Memory/Variables
  83   1        Yes = 1
  84   1        No = 0
  85   1          
  86   1        These Local Variables are always being monitored
  87   1        */
  88   1        while(1){
  89   2          if(s1 == 1){
  90   3            reqForLevel2Go[0] = 1;
  91   3            return;
  92   3          }
  93   2          if(s2 == 1){
  94   3            reqForLevel2Go[1] = 1;
  95   3            return;
  96   3          }
  97   2          if(s3 == 1){
  98   3            reqForLevel2Go[2] = 1;
  99   3            return;
 100   3          }
 101   2          if(s4 == 1){
 102   3            reqForLevel2Go[3] = 1;
 103   3            return;
 104   3          }
 105   2        }
 106   1      }
 107          
 108          void location(int L){
 109   1        /*
 110   1        This Functions will be managing LED related to Locatuion of Elevator's current location
 111   1        Also this function will be taking decesion on basis of of following variable:
 112   1          
 113   1        reqForLevel2Go        ----->Requests from inside of Elevator s1... 
 114   1        upRequestsOutside     ----->Requests from outside of Elevator u1...
 115   1        downRequestsOutside   ----->Requests from outside of Elevator d1...
C51 COMPILER V9.54   CODE                                                                  05/17/2018 09:05:41 PAGE 3   

 116   1        
 117   1        Also this function will be updating values on memory
 118   1        */
 119   1        delay(50);
 120   1        
 121   1        loc_1=0;
 122   1        loc_2=0;
 123   1        loc_3=0;
 124   1        loc_4=0;
 125   1        
 126   1        if(L== 1){                      //Level 1
 127   2          loc_1 = 1;
 128   2          
 129   2          if(reqForLevel2Go[0]){        //Handeling inside Request of Level 1
 130   3            reqForLevel2Go[0] = 0;      //Reset Request to NO
 131   3            doorIsClosed();
 132   3            where2Go();
 133   3          }
 134   2          
 135   2          if(upRequestsOutside[0] && direction == 1){
 136   3            doorIsClosed();
 137   3            where2Go();
 138   3            upRequestsOutside[0] = 0;       //Reset Request to NO
 139   3          }
 140   2        }   
 141   1      
 142   1        if(L== 2){                      //Level 2
 143   2          loc_2 = 1;
 144   2          
 145   2          if(reqForLevel2Go[1]){        //Handeling inside Request of Level 2
 146   3            reqForLevel2Go[1] = 0;      //Reset Request to NO
 147   3            doorIsClosed();
 148   3            where2Go();
 149   3          }
 150   2          
 151   2          if(upRequestsOutside[1] && direction == 1){
 152   3            doorIsClosed();
 153   3            where2Go();
 154   3            upRequestsOutside[1] = 0;       //Reset Request to NO
 155   3          }
 156   2          
 157   2          if(downRequestsOutside[1] && direction == 0){
 158   3            doorIsClosed();
 159   3            where2Go();
 160   3            downRequestsOutside[1] = 0;
 161   3          }
 162   2        } 
 163   1      
 164   1        if(L== 3){                      //Level 3
 165   2          loc_3 = 1;
 166   2          
 167   2          if(reqForLevel2Go[2]){        //Handeling inside Request of Level 2
 168   3            reqForLevel2Go[2] = 0;      //Reset Request to NO
 169   3            where2Go();
 170   3            doorIsClosed();
 171   3          }
 172   2          
 173   2          if(upRequestsOutside[2] && direction == 1){
 174   3            doorIsClosed();
 175   3            where2Go();
 176   3            upRequestsOutside[2] = 0;       //Reset Request to NO
 177   3          }
C51 COMPILER V9.54   CODE                                                                  05/17/2018 09:05:41 PAGE 4   

 178   2          
 179   2          if(downRequestsOutside[2] && direction == 0){
 180   3            doorIsClosed();
 181   3            where2Go();
 182   3            downRequestsOutside[2] = 0;
 183   3          }
 184   2        } 
 185   1        
 186   1        if(L== 4){                      //Level 4
 187   2          loc_4 = 1;
 188   2          
 189   2          if(reqForLevel2Go[3]){        //Handeling inside Request of Level 4
 190   3            reqForLevel2Go[3] = 0;      //Reset Request to NO
 191   3            doorIsClosed();
 192   3            where2Go();
 193   3          }
 194   2          
 195   2          if(downRequestsOutside[3] && direction == 0){
 196   3            doorIsClosed();
 197   3            where2Go();
 198   3            downRequestsOutside[3] = 0;
 199   3          }
 200   2        } 
 201   1      }
 202          
 203          bit ifRequestOutside(void){ //Check if there is Request on any u1... or d1...
 204   1        while(1){
 205   2          if(u1 == 1){
 206   3          req[0] = 'u';
 207   3          req[1] = '1';
 208   3          return 1;
 209   3          }
 210   2          if(u2 == 1){
 211   3          req[0] = 'u';
 212   3          req[1] = '2';
 213   3          return 1;
 214   3          } 
 215   2          if(u3 == 1){
 216   3          req[0] = 'u';
 217   3          req[1] = '3';
 218   3          return 1;
 219   3          }
 220   2          if(u4 == 1){
 221   3          req[0] = 'u';
 222   3          req[1] = '4';
 223   3          return 1;
 224   3          }
 225   2          if(d1 == 1){
 226   3          req[0] = 'd';
 227   3          req[1] = '1';
 228   3          return 1;
 229   3          }
 230   2          if(d2 == 1){
 231   3          req[0] = 'd';
 232   3          req[1] = '2';
 233   3          return 1;
 234   3          } 
 235   2          if(d3 == 1){
 236   3          req[0] = 'd';
 237   3          req[1] = '3';
 238   3          return 1;
 239   3          }
C51 COMPILER V9.54   CODE                                                                  05/17/2018 09:05:41 PAGE 5   

 240   2          if(d4 == 1){
 241   3          req[0] = 'd';
 242   3          req[1] = '4';
 243   3          return 1;
 244   3          }
 245   2        }
 246   1      }
 247          
 248          void emergency(void)interrupt 0{
 249   1        
 250   1        location(LocationOfElevator);
 251   1        upLed(0);
 252   1        downLed(0);
 253   1        doorLed = 1;    //Open Door
 254   1        delay(1000);      //10 minutes Delay and then Elevator Reset's
 255   1        reset();
 256   1        
 257   1        return;
 258   1      } 
 259          
 260          void dsPressed(void) interrupt 2{                 //DS
 261   1        /*
 262   1        Functionality of dsPressed()
 263   1        1.It Checks if LocationOfElevator doesn't overflows i.e LocationOfElevator should always remain b/t 1 to 
             -4
 264   1        2.In case LocationOfElevator is at Limit function will go to change directions of Elevator to up/down acc
             -ordingly
 265   1        
 266   1        3.After all these checks our Elevator will move up/down accordingly
 267   1        4.Now location() will be called which wil be handling LED's
 268   1        
 269   1        
 270   1      */  
 271   1        if(LocationOfElevator == 1){
 272   2          direction = 1;              
 273   2        }
 274   1        if(LocationOfElevator == 4){
 275   2          direction = 0;              
 276   2        }
 277   1        
 278   1        //Both of these condition are fulfilling functionality till (2) 
 279   1        
 280   1        if(direction == 1){             //When Elevator is going Up
 281   2          LocationOfElevator++;
 282   2          downLed(0);
 283   2          delay(5);
 284   2          upLed(1);
 285   2          location(LocationOfElevator);
 286   2        }
 287   1        
 288   1        if(direction == 0){             //When Elevator is going Down
 289   2          LocationOfElevator--;
 290   2          upLed(0);
 291   2          delay(5);
 292   2          downLed(1);
 293   2          location(LocationOfElevator);
 294   2        }
 295   1        return;
 296   1      }
 297          
 298          void interruptsManager(int Mode){
 299   1        /*
C51 COMPILER V9.54   CODE                                                                  05/17/2018 09:05:41 PAGE 6   

 300   1        As i have been using two interrupts EX0, EX1
 301   1        EX0   ---> Emergency Button This interrupt should always be on
 302   1        EX1   ---> DS this interrupt will be on/off when needed
 303   1        
 304   1        There will be two mode's 
 305   1        0. Only Emergency
 306   1        1. Both Emergency and DS
 307   1        */
 308   1        
 309   1        switch(Mode){
 310   2          case 0:
 311   2            IE = 0x81; 
 312   2            break;
 313   2          case 1:
 314   2            IE = 0x85;
 315   2            break;
 316   2        }
 317   1        return;
 318   1      }
 319          
 320          void requestHandler(void){
 321   1        interruptsManager(1);     //interrupts in Mode 1 for refference see details in Function
 322   1        if((req[0] == 'u' && req[1] == '1') == 1){    //Request U1
 323   2          if(LocationOfElevator == 1){
 324   3            doorIsClosed();
 325   3            where2Go();
 326   3          }
 327   2        }
 328   1          
 329   1        if((req[0] == 'u' && req[1] == '2') == 1){    //Request U2
 330   2            upRequestsOutside[1] = 1; //Set request to YES
 331   2        }
 332   1          
 333   1        if((req[0] == 'u' && req[1] == '3') == 1){    //Request U3
 334   2          upRequestsOutside[2] = 1; //Set request to YES
 335   2        }
 336   1          
 337   1        if((req[0] == 'u' && req[1] == '4') == 1){    //Request U4
 338   2          upRequestsOutside[3] = 1; //Set request to YES
 339   2        }
 340   1          
 341   1        if((req[0] == 'd' && req[1] == '1') == 1){    //Request D1
 342   2          downRequestsOutside[0] = 1;     //Set request to YES
 343   2        }
 344   1          
 345   1        if((req[0] == 'd' && req[1] == '2') == 1){    //Request D2
 346   2          downRequestsOutside[1] = 1;     //Set request to YES
 347   2        }
 348   1          
 349   1        if((req[0] == 'd' && req[1] == '3') == 1){    //Request D3
 350   2          downRequestsOutside[2] = 1;     //Set request to YES
 351   2      
 352   2        }
 353   1          
 354   1        if((req[0] == 'd' && req[1] == '4') == 1){    //Request D4
 355   2          downRequestsOutside[3] = 1;     //Set request to YES
 356   2        }
 357   1        
 358   1        return;
 359   1      }
 360          
 361          
C51 COMPILER V9.54   CODE                                                                  05/17/2018 09:05:41 PAGE 7   

 362          void setup(void){
 363   1        P0 = 0xFF;
 364   1        P1 = 0xFF;
 365   1        P2 = 0xFF;
 366   1        P3 = 0xFF;
 367   1        
 368   1        delay(100);
 369   1        
 370   1        P0 = 0x00;          //Clearing Pins to Monitor s1...
 371   1        P1 = 0x00;          //Clearing Pins to Monitor u1... and d1...
 372   1        P2 = 0x00;          //Clear Everything...
 373   1        //P3 = 0x00;
 374   1        LocationOfElevator = 1;
 375   1        location(1);        //Set Location to First Floor
 376   1        direction = 1;      //Set Dirrection to up
 377   1      
 378   1        for(i=0;i<4;i++){
 379   2          reqForLevel2Go[i] = 0;    //Set all inside request to 'NO' 
 380   2          upRequestsOutside[i];     //Set all outside up request to 'NO' 
*** WARNING C275 IN LINE 380 OF code.c: expression with possibly no effect
 381   2          downRequestsOutside[i];   //Set all outside down request to 'NO'
*** WARNING C275 IN LINE 381 OF code.c: expression with possibly no effect
 382   2        }
 383   1      
 384   1        interruptsManager(0);     //interrupts in Mode 0 for refference see details in Function
 385   1        IP = 0x01;                //Interrupt Priority
 386   1        return;
 387   1      }
 388          
 389          void loop(void){
 390   1        if(ifRequestOutside() == 1){
 391   2          requestHandler();
 392   2        }
 393   1        return;
 394   1      }
 395          
 396          
 397          void main(){
 398   1        setup();
 399   1        while(1){
 400   2          loop();
 401   2        } 
 402   1        return;
 403   1      } 


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1045    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     32    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
